/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/calendarManager/v0/{calendar}/events/": {
    /** Create calendar event */
    post: {
      parameters: {
        body: {
          form?: definitions["CreatePersonalCalendarEventFormType"];
        };
        path: {
          calendar: string;
        };
      };
      responses: {
        /** Returned when successful */
        200: {
          schema: definitions["PersonalCalendarEvent"];
        };
      };
    };
  };
  "/api/calendarManager/v0/serviceTypes": {
    get: {
      responses: {
        /** Returned when successful */
        200: {
          schema: {
            /** @description Code of service type */
            code?: string;
          }[];
        };
      };
    };
  };
  "/api/calendarManager/v0/nba/{calendar}/events/{personalCalendarEvent}/cancel": {
    post: {
      parameters: {
        body: {
          form?: definitions["CalendarEventCancelFormType"];
        };
        path: {
          calendar: string;
          personalCalendarEvent: string;
        };
      };
      responses: {
        /** Returned when successful */
        200: {
          schema: definitions["PersonalCalendarEvent2"];
        };
      };
    };
  };
  "/api/calendarManager/v0/nba/{calendar}/events/{personalCalendarEvent}/confirm": {
    post: {
      parameters: {
        body: {
          form?: definitions["CalendarEventConfirmFormType"];
        };
        path: {
          calendar: string;
          personalCalendarEvent: string;
        };
      };
      responses: {
        /** Returned when successful */
        200: {
          schema: definitions["PersonalCalendarEvent"];
        };
      };
    };
  };
  "/api/calendarManager/v0/nba/{calendar}/event": {
    /**
     * After execution the chosen timeslot will be reserved for some amount of time. After this time
     *     the event will be removed in case it is still unconfirmed. If the same slot is reserved by other request, an error
     *     code 400 is thrown.
     */
    post: {
      parameters: {
        body: {
          body?: {
            /** @description Service type code */
            serviceType: string;
            /** @description Timeslot start time string (yyyy-MM-dd\'T\'HH:mm:ssXXX) */
            startDate: string;
            /** @description Visit reason template UUID */
            visitReasonTemplate: string;
          };
        };
        path: {
          calendar: string;
        };
      };
      responses: {
        /** Returned when successful */
        200: {
          schema: {
            /** @description Unique number id of calendar event */
            id?: string;
            /** @description service type codes */
            serviceTypeCodes?: string[];
            /** @description Start date string format Y-m-d H:i:s UTC */
            startDate?: string;
            /** @description End date string format Y-m-d H:i:s UTC */
            endDate?: string;
            /** @description pause number in seconds of calendar event */
            pause?: number;
            /** @description status number of calendar event */
            status?: number;
            /** @description mark about first consultatiom of calendar event */
            isForFirstConsultation?: boolean;
            /** @description Timeslot reservation time interval in minutes */
            reservationDuration?: number;
            /** @description Timeslot reservation end time, format Y-m-d H:i:s UTC */
            reservationEndTime?: string;
          };
        };
      };
    };
  };
  "/api/calendarManager/v0/nba/history": {
    get: {
      parameters: {
        query: {
          /** Seeker email */
          email: string;
          /** Page number */
          page: number;
          /** Number of entries per page */
          perPage: number;
        };
      };
      responses: {
        /** Returned when successful */
        200: {
          schema: {
            /** @description Total entries found */
            total?: number;
            /** @description Page number */
            page?: number;
            /** @description Items per page */
            perPage?: number;
            events?: {
              expert?: definitions["User"];
              /** @description Calendar event ID */
              id?: string;
              /** @description Calendar event noShow flag */
              noShow?: boolean;
              /** @description Start date string format Y-m-d H:i:s UTC */
              startDate?: string;
              /**
               * @description Calendar event status
               * @enum {integer}
               */
              status?:
                | "0 - created"
                | "1 - canceled"
                | "2 - active"
                | "3 - finished";
              /** @description Calendar event members */
              members?: definitions["CalendarEventMember"][];
              /** @description Calendar event visit reason */
              visitReason?: {
                /**
                 * @description Appointment format type
                 * @enum {integer}
                 */
                formatType?: "1 - online" | "2 - offline" | "3 - phone";
              };
              /** @description expert notes of event */
              notes?: string;
              /** @description Calendar event's call details */
              eventSessionDetails?: {
                /** @description Event session dates details */
                dates?: {
                  /** @description Start date string format Y-m-d H:i:s UTC */
                  startDate?: string;
                  /** @description Finish date string format Y-m-d H:i:s UTC */
                  finishDate?: string;
                  /** @description Total passed seconds of the call */
                  duration?: number;
                }[];
              };
            }[];
          };
        };
      };
    };
  };
  "/api/calendarManager/v0/nba/expertList": {
    get: {
      parameters: {
        query: {
          /** Booking date (ISO 8601) */
          dateBooking: string;
          /** Service type code */
          serviceType: string;
          /** Visit reason template UUID */
          visitReasonTemplate: string;
          /** Category ids */
          "categories[]": number;
          /** Organization UUID */
          organizationUuid?: string;
          /** Spoken language ids */
          "spokenLanguages[]"?: number;
          /** Country (ISO 3166-1 alpha-2) */
          country?: string;
          /** Address UUID */
          addressUuid?: string;
          /** Address */
          address?: string;
          /** Radius in kilometers */
          radiusKm?: number;
        };
      };
      responses: {
        /** Returned when successful */
        200: {
          schema: {
            /** @description Unique number of expert user */
            uuid?: string;
            /** @description External ID, can be used to identify users by external applications */
            externalId?: string;
            /** @description First name of expert user */
            firstName?: string;
            /** @description Last name of expert user */
            lastName?: string;
            /** @description Spoken languages id numbers */
            spokenLanguages?: number[];
            /** @description User photo link */
            croppedPhoto?: string;
            /** @description Expert's academic degree description */
            academicDegree?: string;
            /** @description Expert's unique calendar id string */
            calendarId?: string;
            salutation?: {
              /** @description Salutation unique number */
              id?: number;
              translations?: {
                /** @description Language code for salutation (ISO 639-1) */
                locale?: string;
                /** @description Salutation name */
                name?: string;
              }[];
            };
            academicTitle?: {
              /** @description Academic title unique number */
              id?: number;
              translations?: {
                /** @description Language code for academic title (ISO 639-1) */
                locale?: string;
                /** @description Academic title name */
                name?: string;
              }[];
            };
          }[];
        };
      };
    };
  };
  "/api/calendarManager/v0/nba/{userUuid}/timeslots": {
    get: {
      parameters: {
        path: {
          /** Expert user UUID */
          userUuid: string;
        };
        query: {
          /** Address UUID */
          addressUuid?: string;
          /** Start date (ISO 8601) */
          dateStart: string;
          /** End date (ISO 8601) */
          dateEnd: string;
          /** Service type code */
          serviceType: string;
          /** Visit reason template UUID */
          visitReasonTemplate: string;
        };
      };
      responses: {
        /** Returned when successful */
        200: {
          schema: {
            timeSlots?: {
              /** @description Timeslot start time string format Y-m-d H:i:s */
              startTime?: string;
            }[];
            /** @description Date string format Y-m-d H:i:s */
            date?: string;
          }[];
        };
      };
    };
  };
  "/api/calendarManager/v0/nba/randomExpert": {
    get: {
      parameters: {
        query: {
          /** Booking date (ISO 8601) */
          dateBooking: string;
          /** Service type code */
          serviceType: string;
          /** Visit reason template UUID */
          visitReasonTemplate: string;
          /** Category ids */
          "categories[]": number;
          /** Organization UUID */
          organizationUuid?: string;
          /** Spoken language ids */
          "spokenLanguages[]"?: number;
          /** Country (ISO 3166-1 alpha-2) */
          country?: string;
          /** Address UUID */
          addressUuid?: string;
          /** Address */
          address?: string;
          /** Radius in kilometers */
          radiusKm?: number;
        };
      };
      responses: {
        /** Returned when successful */
        200: {
          schema: {
            /** @description Unique number of expert user */
            uuid?: string;
            /** @description External ID, can be used to identify users by external applications */
            externalId?: string;
            /** @description First name of expert user */
            firstName?: string;
            /** @description Last name of expert user */
            lastName?: string;
            /** @description Spoken languages id numbers */
            spokenLanguages?: number[];
            /** @description User photo link */
            croppedPhoto?: string;
            /** @description Expert's academic degree description */
            academicDegree?: string;
            /** @description Expert's unique calendar id string */
            calendarId?: string;
            salutation?: {
              /** @description Salutation unique number */
              id?: number;
              translations?: {
                /** @description Language code for salutation (ISO 639-1) */
                locale?: string;
                /** @description Salutation name */
                name?: string;
              }[];
            };
            academicTitle?: {
              /** @description Academic title unique number */
              id?: number;
              translations?: {
                /** @description Language code for academic title (ISO 639-1) */
                locale?: string;
                /** @description Academic title name */
                name?: string;
              }[];
            };
          };
        };
      };
    };
  };
  "/api/calendarManager/v0/nba/timeslots": {
    get: {
      parameters: {
        query: {
          /** Start date (ISO 8601) */
          dateStart: string;
          /** End date (ISO 8601) */
          dateEnd: string;
          /** Service type code */
          serviceType: string;
          /** Visit reason template UUID */
          visitReasonTemplate: string;
          /** Category ids */
          "categories[]": number;
          /** Organization UUID */
          organizationUuid?: string;
          /** Address UUID */
          location_uuid?: string;
          /** Spoken language ids */
          "spokenLanguages[]"?: number;
          /** Country (ISO 3166-1 alpha-2) */
          country?: string;
          /** Address */
          address?: string;
          /** Radius in kilometers */
          radiusKm?: number;
        };
      };
      responses: {
        /** Returned when successful */
        200: {
          schema: {
            timeSlots?: {
              /** @description Timeslot start time string format Y-m-d H:i:s */
              startTime?: string;
            }[];
            /** @description Date string format Y-m-d H:i:s */
            date?: string;
          }[];
        };
      };
    };
  };
  "/api/calendarManager/v0/nba/visitReasonTemplates": {
    get: {
      parameters: {
        query: {
          /** Service type code */
          serviceType: string;
        };
      };
      responses: {
        /** Returned when successful */
        200: {
          schema: {
            serviceConfigurations?: {
              /** @description Unique code of service type */
              code?: string;
              /** @description Consultation duration number in seconds of service type config */
              consultationDuration?: string;
              /** @description Pause after consultation number in seconds of service type config */
              pauseAfterConsultation?: string;
              /** @description Minimum time border number in seconds of service type config */
              minTimeBorder?: string;
              /** @description Maximum time border number in seconds of service type config */
              maxTimeBorder?: string;
              /** @description Flag that shows whether service type config is enabled */
              isEnabled?: boolean;
              /** @description Flag that shows whether the booking is available by seeker */
              isAbleToBookingBySeeker?: boolean;
            }[];
            /** @description Unique number of visit reason template */
            uuid?: string;
            /** @description Title of visit reason template */
            title?: string;
            /** @description Mark of first consultation to expert */
            isForFirstConsultation?: boolean;
            /** @description Mark of subsequent consultation to expert */
            isForSubsequentConsultation?: boolean;
            /** @description Number of format type for visit reason template */
            formatType?: number;
          }[];
        };
      };
    };
  };
}

export interface definitions {
  CreatePersonalCalendarEventFormType: {
    firstName: string;
    lastName: string;
    email: string;
    serviceTypeCodes: string[];
    /** Format: date-time */
    startDate: string;
    genderCode: string;
    animalName: string;
    animalType: string;
    membershipNumber: string;
    messageToExpert: string;
    /** Format: date-time */
    birthday: string;
    /** Format: CalendarBundle\Entity\VisitReason id */
    visitReason: string;
    /** Format: DataBundle\Entity\Tan id */
    tan: string;
    isForFirstConsultation: boolean;
    notes: string;
    noShow: boolean;
    /** Format: DataBundle\Entity\Address\Address id */
    addressUuid: string;
    userCardUuid: string;
    eventType: string;
    status: number;
    /** @description Seeker user UUID, must be valid if passed */
    userUuid: string;
    /** Format: date-time */
    endDate: string;
    duration: number;
    pause: number;
  };
  PersonalCalendarEvent: {
    id?: string;
    pause?: number;
    status?: number;
    cancelMessage?: string;
    cancellationReason?: string;
    visitReason?: definitions["VisitReason"];
    isForFirstConsultation?: boolean;
    notes?: string;
    noShow?: boolean;
  };
  CalendarEventCancelFormType: {
    message: string;
  };
  PersonalCalendarEvent2: {
    id?: string;
    pause?: number;
    status?: number;
    cancelMessage?: string;
    cancellationReason?: string;
    visitReason?: definitions["VisitReason2"];
    isForFirstConsultation?: boolean;
    notes?: string;
    noShow?: boolean;
  };
  CalendarEventConfirmFormType: {
    firstName: string;
    lastName: string;
    email: string;
    /** Format: DataBundle\Entity\Address\Address id */
    addressUuid: string;
    /** @description Seeker user UUID, must be valid if passed */
    userUuid: string;
    /** Format: [AppBundle\Entity\Category id] */
    categories: string[];
    /** @enum {string} */
    emailLanguage: "en" | "de" | "fr" | "es" | "it" | "zh" | "nl";
    /** Format: date-time */
    birthday: string;
    genderCode: string;
    membershipNumber: string;
    messageToExpert: string;
  };
  User: {
    uuid?: string;
    firstName?: string;
    lastName?: string;
    salutation?: definitions["Salutation"];
    academicTitle?: definitions["AcademicTitle"];
    /** Academic degree */
    academicDegree?: string;
    externalId?: string;
  };
  CalendarEventMember: {
    invitation?: definitions["CalendarEventInvitation"];
  };
  VisitReason: {
    uuid?: string;
    title?: string;
    isForFirstConsultation?: boolean;
    isForSubsequentConsultation?: boolean;
    type?: number;
    formatType?: number;
  };
  VisitReason2: {
    uuid?: string;
    title?: string;
    isForFirstConsultation?: boolean;
    isForSubsequentConsultation?: boolean;
    type?: number;
    formatType?: number;
  };
  Salutation: {
    id?: number;
    /** Translations */
    translations?: definitions["SalutationTranslation"][];
  };
  AcademicTitle: {
    id?: number;
    /** Translations */
    translations?: definitions["AcademicTitleTranslation"][];
  };
  CalendarEventInvitation: {
    /** @description link to start an event */
    startLink?: string;
    /** @description link to cancel an event */
    cancelLink?: string;
    addressStreet?: string;
    addressNumber?: string;
    addressCity?: string;
    addressZip?: string;
  };
  SalutationTranslation: {
    locale?: string;
    name?: string;
  };
  AcademicTitleTranslation: {
    locale?: string;
    name?: string;
  };
}

export interface operations {}

export interface external {}

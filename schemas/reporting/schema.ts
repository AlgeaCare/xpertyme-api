/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/reportingManager/v0/calendarEvents/personal": {
    get: {
      parameters: {
        query: {
          /** Event status filter */
          eventStatus: "all" | "finished" | "canceled" | "active" | "created";
          /** Page number */
          page: number;
          /** Number of entries per page */
          perPage: number;
          /** Calendar event start date from (format yyyy-MM-dd) */
          dateFrom: string;
          /** Calendar event start date to (format yyyy-MM-dd) */
          dateTo: string;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: {
            /** @description Total number of events found */
            total?: string;
            /** @description Page number */
            page?: string;
            /** @description Number of entries per page */
            perPage?: string;
            events?: {
              /** @description Event id */
              calendarEventId?: string;
              /** @description Calendar event owner (expert) */
              expert?: {
                uuid?: string;
                email?: string;
                firstName?: string;
                lastName?: string;
                externalId?: string;
                birthday?: string;
              };
              /** @description Calendar event participant (seeker) */
              participant?: {
                uuid?: string;
                email?: string;
                firstName?: string;
                lastName?: string;
                externalId?: string;
                birthday?: string;
              };
              /** @description Event start date */
              startDate?: string;
              /** @description Event end date */
              endDate?: string;
              /** @description Date created */
              dateCreated?: string;
              /**
               * @description Calendar event status
               * @enum {integer}
               */
              status?: "created" | "active" | "canceled" | "finished";
              /** @description Appointment type */
              appointmentType?: {
                /** @enum {string} */
                type?: "global" | "individual";
                /**
                 * @description Appointment format type
                 * @enum {string}
                 */
                formaType?: "onsite" | "video" | "phone";
                /** @description Appointment type uuid */
                uuid?: string;
                /** @description Appointment type title */
                title?: string;
              };
              /** @description Location UUID */
              locationUuid?: string;
              /** @description No show flag */
              noShow?: boolean;
              /** @description Notes */
              notes?: boolean;
            }[];
          };
        };
        /** Bad request */
        400: unknown;
      };
    };
  };
  "/api/reportingManager/v0/users": {
    get: {
      parameters: {
        query: {
          /** Users type filter (supported values: `all`, `experts`, `clients`) */
          usersType: string;
          /** Page number */
          page: number;
          /** Number of entries per page (max. 50) */
          perPage: number;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: {
            /** @description Total number of events found */
            total?: string;
            /** @description Page number */
            page?: string;
            /** @description Number of entries per page */
            perPage?: string;
            users?: definitions["User"][];
          };
        };
        /** Bad request */
        400: unknown;
      };
    };
  };
  "/api/reportingManager/v0/{calendar}/workingHours": {
    get: {
      parameters: {
        path: {
          calendar: string;
        };
      };
      responses: {
        /** Successful operation */
        200: {
          schema: definitions["WorkingHours"][];
        };
        /** Bad request */
        400: unknown;
      };
    };
  };
}

export interface definitions {
  User: {
    id?: number;
    uuid?: string;
    email?: string;
    firstName?: string;
    lastName?: string;
    salutation?: definitions["Salutation"];
    /** Format: date-time */
    birthday?: string;
    phone?: string;
    /** Format: date-time */
    dateCreated?: string;
    isExpert?: boolean;
    externalId?: string;
  };
  WorkingHours: {
    uuid?: string;
    name?: string;
    repeatingType?: number;
    repeatingPeriod?: number;
    /** Format: date-time */
    dateStarted?: string;
    /**
     * If null: infinite series
     * Format: date-time
     */
    dateFinished?: string;
    timeIntervals?: definitions["WorkingHoursTimeInterval"][];
    visitReasonsList?: definitions["VisitReason"][];
    exceptions?: definitions["WorkingHoursException"][];
  };
  Salutation: {
    id?: number;
    /** Translations */
    translations?: definitions["SalutationTranslation"][];
  };
  WorkingHoursTimeInterval: { [key: string]: unknown };
  VisitReason: { [key: string]: unknown };
  WorkingHoursException: { [key: string]: unknown };
  SalutationTranslation: {
    locale?: string;
    name?: string;
  };
}

export interface operations {}

export interface external {}
